# Docker Compose for Universal Go Service
# Complete local development environment with PostgreSQL

version: '3.8'

services:
  # Main application service
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: universal-service
  #   ports:
  #     - "8080:8080"
  #     - "9090:9090"  # Metrics port
  #   environment:
  #     - GO_ENV=production
  #     - LOG_LEVEL=info
  #     - SERVICE_NAME=universal-service
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=password
  #     - DB_DATABASE=universal_service
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-universal
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=itemdb
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis (optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: redis-universal
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local